{
  "comments": [
    {
      "key": {
        "uuid": "daea87ee_f1fd687f",
        "filename": "src/main/java/com/google/gwtorm/schema/sql/SqlDialect.java",
        "patchSetId": 1
      },
      "lineNbr": 390,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2014-11-18T13:18:34Z",
      "side": 1,
      "message": "This is not exactly what I meant by providing an API to add a primary key :-)\n\nWe don\u0027t need a general purpose addPrimaryKey which simply creates a primary key on any given set of columns. OK, this method may stay but it still leaves the responsibility on the caller to find out the proper primary key columns. See the relationPK method in [1].\n\nThe gwtorm is able to find the primary key columns for a given RelationModel. How otherwise it would create a complete DB schema.\nWhat would really be nice to have is something like:\n\n  public void addPrimaryKey(StatementExecutor e, RelationModel m)\n\nand the method would then find out the primary key columns and create a primary key. Maybe this method doesn\u0027t belong to this class (by its level of abstraction) but should go somewhere else.\n\n[1] https://gerrit-review.googlesource.com/#/c/61361/5/gerrit-pgm/src/main/java/com/google/gerrit/pgm/init/UpdatePrimaryKeys.java",
      "range": {
        "startLine": 381,
        "startChar": 0,
        "endLine": 390,
        "endChar": 49
      },
      "revId": "3d212e67542fcc6ff2f17ccfe1bbaa149ffa2cb1",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a900f9b_2fffe9c1",
        "filename": "src/main/java/com/google/gwtorm/schema/sql/SqlDialect.java",
        "patchSetId": 1
      },
      "lineNbr": 390,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2014-11-18T22:02:49Z",
      "side": 1,
      "message": "I agree that, addPrimaryKey() as define above is a bit out of context here, because it moves the responsibility to caller to retrieve the keys and (not less important as we know now) to provide the columns in the right order. When we starting to extend gwtorm with this kind of methods, then i think that the best would be to add a method:\n\n rebuildPrimaryKey(StatementExecutor e, RelationModel m);\n\nwhich would drop and re-create primary key taking in account SQL dialect abstraction.\n\nOr even to meet our current use case:\n\n  rebuildPrimaryKeyWhenWrongColumnOrder(\n    StatementExecutor e,\n    RelationModel m)\n\nwhith more or less the code that is currently in your schema migration in gerrit. This still leaves the question how we would short cut the whole primary key rebuild post step, so that it could be skipped for sites that don\u0027t suffer from this problem (or for site that re-run unit step, after the wrong column order wa fixed), so we would need a method:\n\n  listTableWithWrongPrimaryKeyColumnOrder()\n\nAll this let me think that we could just leave it as is and not to do it at all ;-)",
      "parentUuid": "daea87ee_f1fd687f",
      "range": {
        "startLine": 381,
        "startChar": 0,
        "endLine": 390,
        "endChar": 49
      },
      "revId": "3d212e67542fcc6ff2f17ccfe1bbaa149ffa2cb1",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a072fcb_d7db3c7b",
        "filename": "src/main/java/com/google/gwtorm/schema/sql/SqlDialect.java",
        "patchSetId": 1
      },
      "lineNbr": 390,
      "author": {
        "id": 1011123
      },
      "writtenOn": "2014-11-19T00:38:20Z",
      "side": 1,
      "message": "\u003e All this let me think that we could just leave it as is and not to do it at all\n\nConsidering the migration where this will be used is intended to be reverted on master, I agree. I will abandon this.",
      "parentUuid": "9a900f9b_2fffe9c1",
      "range": {
        "startLine": 381,
        "startChar": 0,
        "endLine": 390,
        "endChar": 49
      },
      "revId": "3d212e67542fcc6ff2f17ccfe1bbaa149ffa2cb1",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}